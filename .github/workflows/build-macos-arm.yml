name: Build on macOS ARM

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-macos-arm:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        architecture: arm64
        
    - name: Verify ARM architecture
      run: |
        echo "Architecture: $(uname -m)"
        echo "Python architecture: $(python -c 'import platform; print(platform.machine())')"
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install system dependencies
      run: |
        # 安装 Chrome 用于 Selenium
        brew install --cask google-chrome
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Set up Node.js for webcrack
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install webcrack
      run: |
        npm install -g webcrack
        
    - name: Install Playwright browsers
      run: |
        playwright install chromium
        
    - name: Run basic tests
      run: |
        # 测试基本导入
        python -c "from src.core.js_crawler import JSCrawler; print('Import successful')"
        python -c "from src.utils.similarity_analyzer import SimilarityAnalyzer; print('Similarity analyzer import successful')"
        
    - name: Test crawler functionality
      run: |
        # 运行一个简单的测试
        python main.py -u https://httpbin.org/html --mode static -d 1 -t 1 || echo "Test completed with expected behavior"
        
    - name: Create standalone executable
      run: |
        # 创建独立可执行文件
        pyinstaller --onefile --name jsfindcrack-macos-arm64 \
          --add-data "src:src" \
          --hidden-import selenium \
          --hidden-import playwright \
          --hidden-import requests \
          --hidden-import beautifulsoup4 \
          --hidden-import lxml \
          --hidden-import numpy \
          --hidden-import scikit-learn \
          --hidden-import concurrent.futures \
          main.py
        
    - name: Test standalone executable
      run: |
        # 测试独立可执行文件
        ./dist/jsfindcrack-macos-arm64 --help || echo "Executable test completed"
        
    - name: Create release package
      run: |
        # 创建发布包
        mkdir -p release
        cp dist/jsfindcrack-macos-arm64 release/
        cp README.md release/
        cp LICENSE release/
        
        # 创建使用说明
        cat > release/USAGE.md << 'EOF'
        # JSFindCrack - macOS ARM64 独立版本
        
        ## 使用方法
        
        1. 确保系统已安装 Chrome 浏览器
        2. 运行命令：
           ```bash
           ./jsfindcrack-macos-arm64 -u <目标URL> [其他参数]
           ```
        
        ## 示例
        ```bash
        # 静态爬取
        ./jsfindcrack-macos-arm64 -u https://example.com --mode static
        
        # 动态爬取
        ./jsfindcrack-macos-arm64 -u https://example.com --mode dynamic
        
        # 查看帮助
        ./jsfindcrack-macos-arm64 --help
        ```
        
        ## 注意事项
        - 首次运行可能需要下载浏览器驱动
        - 确保有网络连接用于下载依赖
        - 输出文件将保存在当前目录的 output 文件夹中
        EOF
        
        # 打包
        cd release
        tar -czf ../jsfindcrack-macos-arm64.tar.gz *
        cd ..
        
    - name: Archive build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: jsfindcrack-macos-arm64
        path: |
          jsfindcrack-macos-arm64.tar.gz
          dist/jsfindcrack-macos-arm64
        retention-days: 30
        
    - name: Archive logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs
        path: |
          output/*/logs/
          output/*/detailed_log.txt
          *.log
        retention-days: 14